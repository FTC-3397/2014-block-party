#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTMotor,  HTMotor)
#pragma config(Hubs,  S2, HTServo,  none,     none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     backLeftMotor, tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     frontLeftMotor, tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     backRightMotor, tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_2,     frontRightMotor, tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C3_1,     M4Motor,       tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_2,     flagMotor,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_1,     LBoomMotor,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_2,     RBoomMotor,    tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S2_C1_1,    camServo,             tServoStandard)
#pragma config(Servo,  srvo_S2_C1_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


//Simple program allows for the launcher to be triggered at specific powers
//Using program
//Load: Press a button on the right low-to-high(a,x,y,b) then press the right trigger to load to power
//Fire!: Press right trigger again to fire

#include "hitechnic-accelerometer.h"
#include "JoystickDriver.c"
void pullBack(int distance,int power);
void fire();
void launchDriver();
bool armed = false;

/*task main()
{
	servo[camServo] = 0;
	wait10Msec(10);
	while(true)
	{
		launchDriver();
	}
}*/

void pullBack(int distance, int power)
{
	nMotorEncoder[M4Motor] = 0;          			// reset the Motor Encoder of PULLBACK
	while(nMotorEncoder[M4Motor] < distance)  // while the Motor Encoder of Motor B has not yet reached 360 counts:
	{
		motor[M4Motor] = power;                 //M4Motor is given a power level of power
	}
	motor[M4Motor] = 0;												// M4Motor is given a power level of 0 (stop)
	armed = true;
}

void fire()																		//Pulses servo to press up cam
{
	servo[camServo] = 90;
	wait10Msec(50);
	servo[camServo] = 0;
	armed = false;
}

// x = 1, a = 2, b = 3, y = 4, trigger = 7
void launchDriver()																	//This function checks to see if driver wants to load or fire
{
	getJoystickSettings(joystick);
	if(armed == false && joy1Btn(8))						// == Right trigger = button 7 in debuggerwindows
	{
		if(joy1Btn(3))														//Button B pressed => FULL POWER!!!/3000
		{
			pullBack(3000,100);											//3000 = Pull back distance, 100 = power
		}
		if(joy1Btn(4))														//Button Y pressed => medium high power/2300
		{
			pullBack(2300,100);
		}
		if(joy1Btn(1))														//Button x pressed => medium low power/1500
		{
			pullBack(1500,100);
		}
		if(joy1Btn(2))														//Button a pressed => low power/1000
		{
			pullBack(1000,100);
		}
	}
	if(joy1Btn(8))															//Fires the servo hit - return when right trigger button pressed again
	{
		fire();
	}
}
