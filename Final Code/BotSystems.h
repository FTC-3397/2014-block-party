#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTMotor,  HTMotor)
#pragma config(Hubs,  S2, HTServo,  none,     none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Sensor, S3,     IRL,            sensorI2CCustom)
#pragma config(Sensor, S4,     IRR,            sensorI2CCustom)
#pragma config(Motor,  mtr_S1_C1_1,     backLeftMotor, tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     frontLeftMotor, tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     backRightMotor, tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_2,     frontRightMotor, tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C3_1,     M4Motor,       tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_2,     flagMotor,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_1,     LBoomMotor,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_2,     RBoomMotor,    tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S2_C1_1,    camServo1,            tServoStandard)
#pragma config(Servo,  srvo_S2_C1_2,    camServo2,            tServoStandard)
#pragma config(Servo,  srvo_S2_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//test

#include "JoystickDriver.c"

void pullBack(int distance,int power);
void fire();
void stopAllMotors();
void initSystems();

bool armed = false;

//Load: Press a button on the right low-to-high(a,x,y,b) then press the right trigger to load to power
//Fire!: Press right trigger again to fire

void pullBack(int distance, int power)
{
	nMotorEncoder[M4Motor] = 0;          			// reset the Motor Encoder of PULLBACK
	while(nMotorEncoder[M4Motor] < distance)  // while the Motor Encoder of Motor B has not yet reached 360 counts:
	{
		motor[M4Motor] = power;                 //M4Motor is given a power level of power
	}
	motor[M4Motor] = 0;												// M4Motor is given a power level of 0 (stop)
	armed = true;
}

void fire()																		//Pulses servo to press up cam
{
	servo[camServo1] = 90;
	wait10Msec(50);
	servo[camServo1] = 0;
	armed = false;
}

void initSystems()
{
	servo[camServo1] = 0;
	nMotorEncoder[LBoomMotor] = 0;
	nMotorEncoder[RBoomMotor] = 0;
}

void stopAllMotors()
{
	motor[frontLeftMotor] = 0;
	motor[frontRightMotor] = 0;
	motor[backLeftMotor] = 0;
	motor[backRightMotor] = 0;
	motor[flagMotor] = 0;
}
