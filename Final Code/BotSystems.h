#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTMotor,  HTMotor)
#pragma config(Hubs,  S2, HTServo,  none,     none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Sensor, S3,     IRR,            sensorI2CCustom)
#pragma config(Sensor, S4,     IRL,            sensorI2CCustom)
#pragma config(Motor,  motorA,          magLeft,       tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,          magRight,      tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C1_1,     LBoomMotor, tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     RBoomMotor, tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C3_1,     M4Motor,       tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_2,     flagMotor,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_1,     frontRightMotor,    tmotorTetrix, openLoop)  //change back to C1!!!!!!
#pragma config(Motor,  mtr_S1_C4_2,     backRightMotor,    tmotorTetrix, openLoop, reversed)//change back to C1!!!!!!
#pragma config(Motor,  mtr_S1_C2_1,     backLeftMotor, tmotorTetrix, openLoop)   //change back to C4
#pragma config(Motor,  mtr_S1_C2_2,     frontLeftMotor, tmotorTetrix, openLoop)  //change back to C4
#pragma config(Servo,  srvo_S2_C1_1,    camServo2,            tServoStandard)
#pragma config(Servo,  srvo_S2_C1_2,    camServo1,            tServoStandard)   //both servos switched
#pragma config(Servo,  srvo_S2_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


#include "JoystickDriver.c"
#include "hitechnic-eopd.h"
#include "hitechnic-superpro.h"

void pullBack(int distance);
void fire();
void stopAllMotors();
void initSystems();

bool armed = false;

//Load: Press a button on the right low-to-high(a,x,y,b) then press the right trigger to load to power
//Fire!: Press right trigger again to fire

void pullBack(int distance)
{
	nMotorEncoder[M4Motor] = 0;          			// reset the Motor Encoder of PULLBACK
	while(nMotorEncoder[M4Motor] < distance)  // while the Motor Encoder of Motor B has not yet reached 360 counts:
	{
		motor[M4Motor] = 100;                 //M4Motor at 100 power
	}
	motor[M4Motor] = 0;												// M4Motor is given a power level of 0 (stop)
	armed = true;
}

void fire()																		//Pulses servo to press up cam
{
	servo[camServo1] = 116;  //from 156
	servo[camServo2] = 88;  //from 48
	wait10Msec(50);
	servo[camServo1] = 76;
	servo[camServo2] = 128;
	armed = false;
}

void initSystems()
{
	servo[camServo1] = 76;
	servo[camServo2] = 128;
	nMotorEncoder[M4Motor] = 0;
}

void stopAllMotors()
{
	motor[frontLeftMotor] = 0;
	motor[frontRightMotor] = 0;
	motor[backLeftMotor] = 0;
	motor[backRightMotor] = 0;
	motor[flagMotor] = 0;
}
/*
shiftOut function shifts out bytes using SDI and SCK pins -- manually before and after shiftOut set CSA pin

HTSPBwriteIO(HTSPB, 0x00);					//CSA low
shiftOut(sevenSeg[LSD]);					//Shift out least significant digit
shiftOut(sevenSeg[MSD]);					//Shift out most significant digit
HTSPBwriteIO(HTSPB, CSA_PIN);					//CSA high

PROTOBOARD:




void shiftOut(byte data)						//Function shifts out 1 byte
{
	int i;
	for(i = 0; i < 8; i++)
	{
		if(data & 0x80)					        //If MSB masked with 0x80, then data = 1
		{
			HTSPBwriteIO(HTSPB, SDI_PIN);			//Data high
			wait1Msec(1);
			HTSPBwriteIO(HTSPB, SDI_PIN | SCK_PIN);		//Clock high
		}
		else							//If MSB masked with 0x80 == 0 then data = 0
		{
			HTSPBwriteIO(HTSPB, 0x00);			//Data low
			wait1Msec(1);
			HTSPBwriteIO(HTSPB, SCK_PIN);			//Clock high
		}
		wait1Msec(1);
		HTSPBwriteIO(HTSPB, 0x00);				//Clock low
		data = data<<1;						//Shift over to get next MSB bit
	}
}
*/
